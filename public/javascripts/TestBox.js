var socket = io();

var TestList = React.createClass({
  render: function() {
    var testNodes = this.props.data.map(function(test) {
      console.log(test);
      return (
        <Test key={test.id} url={test.url}>
          {test.score}
        </Test>
      );
    });

    return (
      <div className="testList">
        {testNodes}
      </div>
    );
  }
});

var TestForm = React.createClass({
  getInitialState: function() {
    return {url: ''};
  },
  handleUrlChange: function(e) {
    this.setState({url: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var url = this.state.url.trim();
    if (!url) {
      return;
    }
    this.props.onTestSubmit({url: url});
    this.setState({url: ''});
  },
  render: function() {
    return (
      <form className="testForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Input URL..."
          value={this.state.url}
          onChange={this.handleUrlChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

var Test = React.createClass({
  render: function() {
    return (
      <div className="test">
        <h5 className="testUrl">
          {this.props.url}
        </h5>
        {this.props.children}
      </div>
    );
  }
});

var TestBox = React.createClass({
  handleTestReceive: function(test) {
    socket.on('test', data => {
      this.setState({data: data});
    });
  },
  handleTestSubmit: function(test) {
    var tests = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    test.id = Date.now();
    var newTests = tests.concat([test]);
    this.setState({data: newTests});

    socket.emit('test', test);
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.handleTestReceive();
    socket.emit('ready');
  },
  render: function() {
    return (
      <div className="testBox">
        <TestForm onTestSubmit={this.handleTestSubmit} />
        <h1>Tests</h1>
        <TestList data={this.state.data} />
      </div>
    );
  }
});

ReactDOM.render(
  <TestBox />,
  document.getElementById('content')
);
